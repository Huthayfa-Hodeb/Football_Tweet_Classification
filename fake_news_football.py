# -*- coding: utf-8 -*-
"""Fake News football.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kes71iU_QmS2OFi7yrBhBLckQk61i5eM

# Importing the libraries
"""

import numpy as np
import pandas as pd

"""# Reading Data Sets"""

fake_data = pd.read_csv("fake.csv")
real_data = pd.read_csv("real.csv")

"""# Add new column with 0 for fake and 1 for real"""

fake_data["target"] = 0
real_data["target"] = 1

"""# Concatenating fake data and real data"""

dataset = pd.concat([fake_data,real_data],ignore_index = True)

# For suffling :
dataset = dataset.sample(frac=1).reset_index(drop=True)

"""# Taking a look in the data set"""

dataset.head()

dataset.shape

dataset.dtypes

"""## Take a quick look at the `target` column:"""

dataset['target'].value_counts()

"""## Check for missing values"""

dataset.isnull().sum()

dataset.dropna(inplace = True)

len(dataset)

dataset.isnull().sum()

"""# Detect & remove empty strings"""

blanks = []  # initialize an empty list to store the indices of rows with blank reviews

for i, lb, rv in dataset.itertuples():
    if isinstance(rv, str) and rv.isspace():  # check if 'review' is a string and contains only whitespace
        blanks.append(i)  # add the index to the list
        
print(len(blanks), 'blanks: ', blanks)

"""## Split the data into train & test sets:"""

from sklearn.model_selection import train_test_split
X = dataset["tweet"]
y = dataset["target"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)

"""## Build pipelines to vectorize the data, then train and fit a model

"""

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from xgboost import XGBClassifier

text_clf_xgb = Pipeline([('tfidf', TfidfVectorizer()), ('clf', XGBClassifier()),])

"""## Feed the training data through the first pipeline"""

text_clf_xgb.fit(X_train, y_train)

"""## Run predictions and analyze the results (Xgboost)"""

predictions = text_clf_xgb.predict(X_test)

# Report the confusion matrix
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
print(confusion_matrix(y_test,predictions))

# Print a classification report
print(classification_report(y_test,predictions))

# Print the overall accuracy
print(accuracy_score(y_test,predictions))

"""## Feed new data into a trained model

"""

review = input("Enter the review : ")

predict = text_clf_xgb.predict([review])

if predict == 0:
  print("The tweet is fake")
else:
  print("The tweet is real")